STRONGLY CONNECTED GRAPH OR COMPONENTS

Kosarajuâ€™s Algorithm Steps
Perform a DFS on the original graph and push each vertex onto a stack in the order of completion.
Transpose the graph (reverse the direction of all edges).
Perform DFS on the transposed graph in the order defined by the stack. Each DFS call will give a strongly connected component.



#include<bits/stdc++.h>
using namespace std;

void dfs(int start, vector<int> adj[], stack<int>& st, vector<bool>& vis) {
    vis[start] = true;
    for (auto neighbour : adj[start]) {
        if (!vis[neighbour]) {
            dfs(neighbour, adj, st, vis);
        }
    }
    st.push(start);
}

void transposeGraph(vector<int> adj[], vector<int> transpose[], int V) {
    for (int i = 0; i < V; i++) {
        for (auto neighbour : adj[i]) {
            transpose[neighbour].push_back(i);
        }
    }
}

void revDfs(int start, vector<int> transpose[], vector<bool>& vis, vector<int>& temp) {
    vis[start] = true;
    temp.push_back(start);
    for (auto neighbour : transpose[start]) {
        if (!vis[neighbour]) {
            revDfs(neighbour, transpose, vis, temp);
        }
    }
}

vector<vector<int>> findSCCs(vector<int> adj[], int V) {
    stack<int> st;
    vector<bool> vis(V, false);

    // Step 1: Perform DFS and push nodes to stack in finishing order
    for (int i = 0; i < V; i++) {
        if (!vis[i]) {
            dfs(i, adj, st, vis);
        }
    }

    vector<vector<int>> ans;
    // Step 2: Transpose the graph
    vector<int> transpose[V];
    transposeGraph(adj, transpose, V);

    // Step 3: Perform DFS on transposed graph in the order of stack
    fill(vis.begin(), vis.end(), false);
    while (!st.empty()) {
        int node = st.top();
        st.pop();
        if (!vis[node]) {
            vector<int> temp;
            revDfs(node, transpose, vis, temp);
            ans.push_back(temp);
        }
    }
    return ans;
}

int main() {
    int V, E;
    cout << "Enter number of vertices and edges: ";
    cin >> V >> E;
    vector<int> adj[V];
    cout << "Enter edges (u v):" << endl;
    for (int i = 0; i < E; i++) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
    }

    vector<vector<int>> ans = findSCCs(adj, V);
    
    for (auto& scc : ans) {
        for (auto node : scc) {
            cout << node << " ";
        }
        cout << endl;
    }

    return 0;
}


I/P 

Enter number of vertices and edges: 5 5
Enter edges (u v):
0 2
0 3
2 1
1 0
3 4
0 1 2 
3 
4 


TC O(V+E)
SC O(V)
